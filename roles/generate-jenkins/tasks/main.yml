---
#######################
#   Set UID and GID   #
#######################

- name: set UID
  when: lookup('env', 'PUID')
  user:
    name: abc
    non_unique: yes
    uid: "{{ lookup('env', 'PUID') | int }}"
- name: set GID
  when: lookup('env', 'PGID')
  group:
    name: abc
    non_unique: yes
    gid: "{{ lookup('env', 'PGID') | int }}"

######################################
#   Grab the Variables from github   #
######################################
- name: include var files for this project
  include_vars:
    file: "/tmp/{{ item }}"
  loop: "{{  templated_vars  }}"

- name: include template loop variables
  include_vars:
    file: "/ansible/roles/generate-jenkins/templates.yml"

############################
#   Directory Management   #
############################
- name: create destination dir for generated github files
  file:
    path: "/tmp/.github"
    state: directory
    owner: "abc"
    group: "abc"

- name: set basefolder
  set_fact:
    project_base: "/tmp"

- name: set vars basefolder
  set_fact:
    dl_vars_project_base: /tmp

- name: create destination dir for generated github workflow files
  file:
    path: "/tmp/.github/workflows"
    state: directory
    owner: "abc"
    group: "abc"

- name: create destination dir for generated github ISSUE_TEMPLATE files
  file:
    path: "/tmp/.github/ISSUE_TEMPLATE"
    state: directory
    owner: "abc"
    group: "abc"

- name: create destination dir for generated donate.txt
  when:
    - sponsor_links is defined
  file:
    path: "/tmp/root"
    state: directory
    owner: "abc"
    group: "abc"

- name: create destination dir for generated 99-deprecation
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/cont-init.d"
    state: directory
    owner: "abc"
    group: "abc"

- name: deprecate - create dir for init-services/dependencies.d
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/s6-overlay/s6-rc.d/init-services/dependencies.d"
    state: directory
    owner: "abc"
    group: "abc"

- name: deprecate - create file for init-services/dependencies.d/init-deprecate
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/s6-overlay/s6-rc.d/init-services/dependencies.d/init-deprecate"
    state: touch
    owner: "abc"
    group: "abc"

- name: deprecate - create dir for init-deprecate/dependencies.d
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/s6-overlay/s6-rc.d/init-deprecate/dependencies.d"
    state: directory
    owner: "abc"
    group: "abc"

- name: deprecate - create file for init-deprecate/dependencies.d/init-config-end
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/s6-overlay/s6-rc.d/init-deprecate/dependencies.d/init-config-end"
    state: touch
    owner: "abc"
    group: "abc"

- name: deprecate - create file for init-deprecate/type
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/s6-overlay/s6-rc.d/init-deprecate/type"
    state: touch
    owner: "abc"
    group: "abc"

- name: deprecate - populate file for init-deprecate/type
  when:
    - project_deprecation_status == true
  copy:
    dest: "/tmp/root/etc/s6-overlay/s6-rc.d/init-deprecate/type"
    content: |
      oneshot

- name: deprecate - create file for init-deprecate/up
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/s6-overlay/s6-rc.d/init-deprecate/up"
    state: touch
    owner: "abc"
    group: "abc"

- name: deprecate - populate file for init-deprecate/up
  when:
    - project_deprecation_status == true
  copy:
    dest: "/tmp/root/etc/s6-overlay/s6-rc.d/init-deprecate/up"
    content: |
      /etc/s6-overlay/s6-rc.d/init-deprecate/run

- name: deprecate - create file for user/contents.d/init-deprecate
  when:
    - project_deprecation_status == true
  file:
    path: "/tmp/root/etc/s6-overlay/s6-rc.d/user/contents.d/init-deprecate"
    state: touch
    owner: "abc"
    group: "abc"

- name: armhf deprecate
  register: armhf_deprecate_readme
  when:
    - not 'deprecate armhf' in (changelogs | map(attribute="desc") | string | lower)
    - arch_armhf in (available_architectures | map(attribute="arch") )
    - not build_armhf
  shell: exit 1
  failed_when: false
  changed_when: armhf_deprecate_readme.rc != 0

- name: armhf deprecate - fetch readme-vars
  when: armhf_deprecate_readme.changed
  slurp:
    src: "{{ dl_vars_project_base }}/readme-vars.yml"
  register: armhf_deprecate_raw_readme

- name: armhf deprecate - update readme-vars
  when: armhf_deprecate_readme.changed
  set_fact:
    changelogs: "{{ [{ 'date': '%d.%m.%y:' | strftime, 'desc': 'Deprecate armhf. As announced [here](https://www.linuxserver.io/blog/a-farewell-to-arm-hf)' }] + changelogs }}"
    available_architectures: "{{ available_architectures | rejectattr('arch', 'eq', arch_armhf) }}"
    raw_available_architectures: "{{ (armhf_deprecate_raw_readme['content'] | b64decode | from_yaml).available_architectures | rejectattr('arch', 'eq', '{{ arch_armhf }}') }}"

- name: armhf deprecate - write readme-vars
  when: armhf_deprecate_readme.changed
  environment:
    available_architectures: "{{ raw_available_architectures | to_yaml }}"
    changelogs: "{{ changelogs | to_yaml }}"
  shell: |
    yq e -i 'with(.available_architectures; . = env(available_architectures) | .. style="double" | .[] style="flow")' "{{ dl_vars_project_base }}/readme-vars.yml"
    yq e -i 'with(.changelogs; . = env(changelogs) | .. style="double" | .[] style="flow")' "{{ dl_vars_project_base }}/readme-vars.yml"
  register: write_readme
  changed_when: write_readme.rc != 0

- name: armhf deprecate - delete armhf dockerfile
  when:
    - armhf_deprecate_readme.changed
  file:
    path: "{{ project_base }}/Dockerfile.armhf"
    state: absent

- name: create destination dir for generated external files
  file:
    path: "/tmp/.jenkins-external"
    state: directory
    owner: "abc"
    group: "abc"

##############################
#   Loop Through Templates   #
##############################

# Normal Files

- name: write templates
  when:
    - item.readme is not defined
    - item.donate is not defined
    - item.deprecation is not defined
    - item.unraid_template is not defined
    - item.package_trigger is not defined
    - item.external_trigger is not defined
  template:
    src: "../templates/{{ item.src }}"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
  delegate_to: localhost
  loop: "{{  templated_files  }}"

# Readme templating

- name: write readme normal
  when:
    - item.readme is defined
    - full_custom_readme is not defined
  template:
    src: "../templates/{{ item.src }}"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
  delegate_to: localhost
  loop: "{{  templated_files  }}"

- name: write readme full custom
  when:
    - item.readme is defined
    - full_custom_readme is defined
  template:
    src: "../templates/{{ item.src }}-CUSTOM"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
  delegate_to: localhost
  loop: "{{  templated_files  }}"

# Donation links templating

- name: write donation links
  when:
    - item.donate is defined
    - sponsor_links is defined
  template:
    src: "../templates/{{ item.src }}"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
  delegate_to: localhost
  loop: "{{  templated_files  }}"

# Deprecation init script templating

- name: write deprecation init script
  when:
    - item.deprecation is defined
    - project_deprecation_status == true
  template:
    src: "../templates/{{ item.src }}"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
    mode: 0755
  delegate_to: localhost
  loop: "{{  templated_files  }}"


# Unraid template templating

- name: write Unraid template
  when:
    - unraid_template
    - item.unraid_template is defined
    - full_custom_readme is not defined
    - '"baseimage" not in project_name'
    - '"jenkins-builder" not in project_name'
  template:
    src: "../templates/{{ item.src }}"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
  delegate_to: localhost
  loop: "{{  templated_files  }}"

# Package trigger templating

- name: write package trigger
  when:
    - item.package_trigger is defined
    - custom_package_trigger != true
  template:
    src: "../templates/{{ item.src }}"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
  delegate_to: localhost
  loop: "{{  templated_files  }}"

# External trigger templating

- name: write external trigger
  when:
    - item.external_trigger is defined
    - custom_external_trigger != true
  template:
    src: "../templates/{{ item.src }}"
    dest: "/tmp/{{ item.dest }}"
    owner: "abc"
    group: "abc"
  delegate_to: localhost
  loop: "{{  templated_files  }}"
